/* -*- C++ -*- */
/* Generated by /mnt/d/Work/OpenDDS-SDK-Build/OpenDDS-master/bin/opendds_idl version 3.23.0-dev (ACE version 6.2a_p25) running on input file Relay.idl */
#ifndef OPENDDS_IDL_GENERATED_RELAYC_H_F2QIEV
#define OPENDDS_IDL_GENERATED_RELAYC_H_F2QIEV
#include <array>
#include <cstdint>
#include <string>
#include <utility>
#include <vector>
#include "dds/DdsDcpsCoreC.h"
#include "dds/DdsDcpsCoreC.h"
#include "export.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: ShortSeq */


/* End TYPEDEF: ShortSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: InstanceHandleSeq */


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */


/* End STRUCT: Duration_t */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin STRUCT: Property_t */


/* End STRUCT: Property_t */


/* Begin TYPEDEF: PropertySeq */


/* End TYPEDEF: PropertySeq */


/* Begin STRUCT: BinaryProperty_t */


/* End STRUCT: BinaryProperty_t */


/* Begin TYPEDEF: BinaryPropertySeq */


/* End TYPEDEF: BinaryPropertySeq */


/* Begin STRUCT: PropertyQosPolicy */


/* End STRUCT: PropertyQosPolicy */


/* Begin STRUCT: UserDataQosPolicy */


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin TYPEDEF: DataRepresentationId_t */


/* End TYPEDEF: DataRepresentationId_t */


/* Begin CONST: XCDR_DATA_REPRESENTATION */


/* End CONST: XCDR_DATA_REPRESENTATION */


/* Begin CONST: XML_DATA_REPRESENTATION */


/* End CONST: XML_DATA_REPRESENTATION */


/* Begin CONST: XCDR2_DATA_REPRESENTATION */


/* End CONST: XCDR2_DATA_REPRESENTATION */


/* Begin TYPEDEF: DataRepresentationIdSeq */


/* End TYPEDEF: DataRepresentationIdSeq */


/* Begin STRUCT: DataRepresentationQosPolicy */


/* End STRUCT: DataRepresentationQosPolicy */


/* Begin CONST: DATA_REPRESENTATION_QOS_POLICY_ID */


/* End CONST: DATA_REPRESENTATION_QOS_POLICY_ID */


/* Begin CONST: DATA_REPRESENTATION_QOS_POLICY_NAME */


/* End CONST: DATA_REPRESENTATION_QOS_POLICY_NAME */


/* Begin TYPEDEF: TypeConsistencyEnforcementQosPolicyKind_t */


/* End TYPEDEF: TypeConsistencyEnforcementQosPolicyKind_t */


/* Begin CONST: DISALLOW_TYPE_COERCION */


/* End CONST: DISALLOW_TYPE_COERCION */


/* Begin CONST: ALLOW_TYPE_COERCION */


/* End CONST: ALLOW_TYPE_COERCION */


/* Begin STRUCT: TypeConsistencyEnforcementQosPolicy */


/* End STRUCT: TypeConsistencyEnforcementQosPolicy */


/* Begin STRUCT: TopicQos */


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */


/* End STRUCT: DomainParticipantQos */


/* Begin TYPEDEF: OctetArray16 */


/* End TYPEDEF: OctetArray16 */


/* Begin STRUCT: BuiltinTopicKey_t */


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */


/* End STRUCT: Time_t */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin STRUCT: SampleInfo */


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin CONST: UNALIGNED_CDR_DATA_REPRESENTATION */


/* End CONST: UNALIGNED_CDR_DATA_REPRESENTATION */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: RtpsRelay */



/* Begin CONST: HSPDP */

namespace RtpsRelay {
const std::string HSPDP = "HSPDP";
}

/* End CONST: HSPDP */


/* Begin CONST: HSEDP */

namespace RtpsRelay {
const std::string HSEDP = "HSEDP";
}

/* End CONST: HSEDP */


/* Begin CONST: HDATA */

namespace RtpsRelay {
const std::string HDATA = "HDATA";
}

/* End CONST: HDATA */


/* Begin CONST: VSPDP */

namespace RtpsRelay {
const std::string VSPDP = "VSPDP";
}

/* End CONST: VSPDP */


/* Begin CONST: VSEDP */

namespace RtpsRelay {
const std::string VSEDP = "VSEDP";
}

/* End CONST: VSEDP */


/* Begin CONST: VDATA */

namespace RtpsRelay {
const std::string VDATA = "VDATA";
}

/* End CONST: VDATA */


/* Begin TYPEDEF: GuidPrefix_t */

namespace RtpsRelay {
using GuidPrefix_t = std::array<uint8_t, 12>;
}

/* End TYPEDEF: GuidPrefix_t */


/* Begin TYPEDEF: EntityKey_t */

namespace RtpsRelay {
using EntityKey_t = std::array<uint8_t, 3>;
}

/* End TYPEDEF: EntityKey_t */


/* Begin STRUCT: EntityId_t */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export EntityId_t
{
public:

  void entityKey(const  ::RtpsRelay::EntityKey_t& val) { _entityKey = val; }
  void entityKey( ::RtpsRelay::EntityKey_t&& val) { _entityKey = std::move(val); }
  const  ::RtpsRelay::EntityKey_t& entityKey() const { return _entityKey; }
   ::RtpsRelay::EntityKey_t& entityKey() { return _entityKey; }
   ::RtpsRelay::EntityKey_t _entityKey{};

  void entityKind(uint8_t val) { _entityKind = val; }
  uint8_t entityKind() const { return _entityKind; }
  uint8_t& entityKind() { return _entityKind; }
  uint8_t _entityKind{};

  EntityId_t() = default;
  EntityId_t(const  ::RtpsRelay::EntityKey_t& entityKey,
    uint8_t entityKind);

};

OpenDDS_RtpsRelayLib_Export void swap(EntityId_t& lhs, EntityId_t& rhs);

}

/* End STRUCT: EntityId_t */


/* Begin STRUCT: GUID_t */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export GUID_t
{
public:

  void guidPrefix(const  ::RtpsRelay::GuidPrefix_t& val) { _guidPrefix = val; }
  void guidPrefix( ::RtpsRelay::GuidPrefix_t&& val) { _guidPrefix = std::move(val); }
  const  ::RtpsRelay::GuidPrefix_t& guidPrefix() const { return _guidPrefix; }
   ::RtpsRelay::GuidPrefix_t& guidPrefix() { return _guidPrefix; }
   ::RtpsRelay::GuidPrefix_t _guidPrefix{};

  void entityId(const  ::RtpsRelay::EntityId_t& val) { _entityId = val; }
  void entityId( ::RtpsRelay::EntityId_t&& val) { _entityId = std::move(val); }
  const  ::RtpsRelay::EntityId_t& entityId() const { return _entityId; }
   ::RtpsRelay::EntityId_t& entityId() { return _entityId; }
   ::RtpsRelay::EntityId_t _entityId;

  GUID_t() = default;
  GUID_t(const  ::RtpsRelay::GuidPrefix_t& guidPrefix,
    const  ::RtpsRelay::EntityId_t& entityId);

};

OpenDDS_RtpsRelayLib_Export void swap(GUID_t& lhs, GUID_t& rhs);

}

/* End STRUCT: GUID_t */


/* Begin TYPEDEF: StringSequence */

namespace RtpsRelay {
using StringSequence = std::vector<std::string>;
}

/* End TYPEDEF: StringSequence */


/* Begin TYPEDEF: GuidSequence */

namespace RtpsRelay {
using GuidSequence = std::vector< ::RtpsRelay::GUID_t>;
}

/* End TYPEDEF: GuidSequence */


/* Begin CONST: RELAY_PARTITIONS_TOPIC_NAME */

namespace RtpsRelay {
const std::string RELAY_PARTITIONS_TOPIC_NAME = "Relay Partitions";
}

/* End CONST: RELAY_PARTITIONS_TOPIC_NAME */


/* Begin STRUCT: RelayPartitions */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export RelayPartitions
{
public:

  void relay_id(const std::string& val) { _relay_id = val; }
  void relay_id(std::string&& val) { _relay_id = std::move(val); }
  const std::string& relay_id() const { return _relay_id; }
  std::string& relay_id() { return _relay_id; }
  std::string _relay_id;

  void slot(uint32_t val) { _slot = val; }
  uint32_t slot() const { return _slot; }
  uint32_t& slot() { return _slot; }
  uint32_t _slot{};

  void partitions(const  ::RtpsRelay::StringSequence& val) { _partitions = val; }
  void partitions( ::RtpsRelay::StringSequence&& val) { _partitions = std::move(val); }
  const  ::RtpsRelay::StringSequence& partitions() const { return _partitions; }
   ::RtpsRelay::StringSequence& partitions() { return _partitions; }
   ::RtpsRelay::StringSequence _partitions;

  RelayPartitions() = default;
  RelayPartitions(const std::string& relay_id,
    uint32_t slot,
    const  ::RtpsRelay::StringSequence& partitions);

};

OpenDDS_RtpsRelayLib_Export void swap(RelayPartitions& lhs, RelayPartitions& rhs);

}

/* End STRUCT: RelayPartitions */


/* Begin CONST: RELAY_ADDRESSES_TOPIC_NAME */

namespace RtpsRelay {
const std::string RELAY_ADDRESSES_TOPIC_NAME = "Relay Addresses";
}

/* End CONST: RELAY_ADDRESSES_TOPIC_NAME */


/* Begin STRUCT: RelayAddress */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export RelayAddress
{
public:

  void relay_id(const std::string& val) { _relay_id = val; }
  void relay_id(std::string&& val) { _relay_id = std::move(val); }
  const std::string& relay_id() const { return _relay_id; }
  std::string& relay_id() { return _relay_id; }
  std::string _relay_id;

  void name(const std::string& val) { _name = val; }
  void name(std::string&& val) { _name = std::move(val); }
  const std::string& name() const { return _name; }
  std::string& name() { return _name; }
  std::string _name;

  void address(const std::string& val) { _address = val; }
  void address(std::string&& val) { _address = std::move(val); }
  const std::string& address() const { return _address; }
  std::string& address() { return _address; }
  std::string _address;

  RelayAddress() = default;
  RelayAddress(const std::string& relay_id,
    const std::string& name,
    const std::string& address);

};

OpenDDS_RtpsRelayLib_Export void swap(RelayAddress& lhs, RelayAddress& rhs);

}

/* End STRUCT: RelayAddress */


/* Begin CONST: RELAY_STATUS_TOPIC_NAME */

namespace RtpsRelay {
const std::string RELAY_STATUS_TOPIC_NAME = "Relay Status";
}

/* End CONST: RELAY_STATUS_TOPIC_NAME */


/* Begin STRUCT: RelayStatus */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export RelayStatus
{
public:

  void relay_id(const std::string& val) { _relay_id = val; }
  void relay_id(std::string&& val) { _relay_id = std::move(val); }
  const std::string& relay_id() const { return _relay_id; }
  std::string& relay_id() { return _relay_id; }
  std::string _relay_id;

  void admitting(bool val) { _admitting = val; }
  bool admitting() const { return _admitting; }
  bool& admitting() { return _admitting; }
  bool _admitting{};

  RelayStatus() = default;
  RelayStatus(const std::string& relay_id,
    bool admitting);

};

OpenDDS_RtpsRelayLib_Export void swap(RelayStatus& lhs, RelayStatus& rhs);

}

/* End STRUCT: RelayStatus */


/* Begin CONST: RELAY_PARTICIPANT_STATUS_TOPIC_NAME */

namespace RtpsRelay {
const std::string RELAY_PARTICIPANT_STATUS_TOPIC_NAME = "Relay Participant Status";
}

/* End CONST: RELAY_PARTICIPANT_STATUS_TOPIC_NAME */


/* Begin STRUCT: RelayParticipantStatus */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export RelayParticipantStatus
{
public:

  void relay_id(const std::string& val) { _relay_id = val; }
  void relay_id(std::string&& val) { _relay_id = std::move(val); }
  const std::string& relay_id() const { return _relay_id; }
  std::string& relay_id() { return _relay_id; }
  std::string _relay_id;

  void guid(const  ::RtpsRelay::GUID_t& val) { _guid = val; }
  void guid( ::RtpsRelay::GUID_t&& val) { _guid = std::move(val); }
  const  ::RtpsRelay::GUID_t& guid() const { return _guid; }
   ::RtpsRelay::GUID_t& guid() { return _guid; }
   ::RtpsRelay::GUID_t _guid;

  void active(bool val) { _active = val; }
  bool active() const { return _active; }
  bool& active() { return _active; }
  bool _active{};

  void active_ts(const  ::DDS::Time_t& val) { _active_ts = val; }
  void active_ts( ::DDS::Time_t&& val) { _active_ts = std::move(val); }
  const  ::DDS::Time_t& active_ts() const { return _active_ts; }
   ::DDS::Time_t& active_ts() { return _active_ts; }
   ::DDS::Time_t _active_ts;

  void alive(bool val) { _alive = val; }
  bool alive() const { return _alive; }
  bool& alive() { return _alive; }
  bool _alive{};

  void alive_ts(const  ::DDS::Time_t& val) { _alive_ts = val; }
  void alive_ts( ::DDS::Time_t&& val) { _alive_ts = std::move(val); }
  const  ::DDS::Time_t& alive_ts() const { return _alive_ts; }
   ::DDS::Time_t& alive_ts() { return _alive_ts; }
   ::DDS::Time_t _alive_ts;

  void user_data(const  ::DDS::UserDataQosPolicy& val) { _user_data = val; }
  void user_data( ::DDS::UserDataQosPolicy&& val) { _user_data = std::move(val); }
  const  ::DDS::UserDataQosPolicy& user_data() const { return _user_data; }
   ::DDS::UserDataQosPolicy& user_data() { return _user_data; }
   ::DDS::UserDataQosPolicy _user_data;

  RelayParticipantStatus() = default;
  RelayParticipantStatus(const std::string& relay_id,
    const  ::RtpsRelay::GUID_t& guid,
    bool active,
    const  ::DDS::Time_t& active_ts,
    bool alive,
    const  ::DDS::Time_t& alive_ts,
    const  ::DDS::UserDataQosPolicy& user_data);

};

OpenDDS_RtpsRelayLib_Export void swap(RelayParticipantStatus& lhs, RelayParticipantStatus& rhs);

}

/* End STRUCT: RelayParticipantStatus */


/* Begin CONST: SPDP_REPLAY_TOPIC_NAME */

namespace RtpsRelay {
const std::string SPDP_REPLAY_TOPIC_NAME = "SPDP Replay";
}

/* End CONST: SPDP_REPLAY_TOPIC_NAME */


/* Begin STRUCT: SpdpReplay */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export SpdpReplay
{
public:

  void partitions(const  ::RtpsRelay::StringSequence& val) { _partitions = val; }
  void partitions( ::RtpsRelay::StringSequence&& val) { _partitions = std::move(val); }
  const  ::RtpsRelay::StringSequence& partitions() const { return _partitions; }
   ::RtpsRelay::StringSequence& partitions() { return _partitions; }
   ::RtpsRelay::StringSequence _partitions;

  void address(const std::string& val) { _address = val; }
  void address(std::string&& val) { _address = std::move(val); }
  const std::string& address() const { return _address; }
  std::string& address() { return _address; }
  std::string _address;

  void guid(const  ::RtpsRelay::GUID_t& val) { _guid = val; }
  void guid( ::RtpsRelay::GUID_t&& val) { _guid = std::move(val); }
  const  ::RtpsRelay::GUID_t& guid() const { return _guid; }
   ::RtpsRelay::GUID_t& guid() { return _guid; }
   ::RtpsRelay::GUID_t _guid;

  SpdpReplay() = default;
  SpdpReplay(const  ::RtpsRelay::StringSequence& partitions,
    const std::string& address,
    const  ::RtpsRelay::GUID_t& guid);

};

OpenDDS_RtpsRelayLib_Export void swap(SpdpReplay& lhs, SpdpReplay& rhs);

}

/* End STRUCT: SpdpReplay */


/* Begin STRUCT: RelayHeader */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export RelayHeader
{
public:

  void to_partitions(const  ::RtpsRelay::StringSequence& val) { _to_partitions = val; }
  void to_partitions( ::RtpsRelay::StringSequence&& val) { _to_partitions = std::move(val); }
  const  ::RtpsRelay::StringSequence& to_partitions() const { return _to_partitions; }
   ::RtpsRelay::StringSequence& to_partitions() { return _to_partitions; }
   ::RtpsRelay::StringSequence _to_partitions;

  void to_guids(const  ::RtpsRelay::GuidSequence& val) { _to_guids = val; }
  void to_guids( ::RtpsRelay::GuidSequence&& val) { _to_guids = std::move(val); }
  const  ::RtpsRelay::GuidSequence& to_guids() const { return _to_guids; }
   ::RtpsRelay::GuidSequence& to_guids() { return _to_guids; }
   ::RtpsRelay::GuidSequence _to_guids;

  RelayHeader() = default;
  RelayHeader(const  ::RtpsRelay::StringSequence& to_partitions,
    const  ::RtpsRelay::GuidSequence& to_guids);

};

OpenDDS_RtpsRelayLib_Export void swap(RelayHeader& lhs, RelayHeader& rhs);

}

/* End STRUCT: RelayHeader */


/* Begin STRUCT: Duration_t */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export Duration_t
{
public:

  void sec(int32_t val) { _sec = val; }
  int32_t sec() const { return _sec; }
  int32_t& sec() { return _sec; }
  int32_t _sec{};

  void nanosec(uint32_t val) { _nanosec = val; }
  uint32_t nanosec() const { return _nanosec; }
  uint32_t& nanosec() { return _nanosec; }
  uint32_t _nanosec{};

  Duration_t() = default;
  Duration_t(int32_t sec,
    uint32_t nanosec);

};

OpenDDS_RtpsRelayLib_Export void swap(Duration_t& lhs, Duration_t& rhs);

}

/* End STRUCT: Duration_t */


/* Begin STRUCT: ProtocolStatistics */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export ProtocolStatistics
{
public:

  void messages_in(uint32_t val) { _messages_in = val; }
  uint32_t messages_in() const { return _messages_in; }
  uint32_t& messages_in() { return _messages_in; }
  uint32_t _messages_in{};

  void bytes_in(uint64_t val) { _bytes_in = val; }
  uint64_t bytes_in() const { return _bytes_in; }
  uint64_t& bytes_in() { return _bytes_in; }
  uint64_t _bytes_in{};

  void messages_ignored(uint32_t val) { _messages_ignored = val; }
  uint32_t messages_ignored() const { return _messages_ignored; }
  uint32_t& messages_ignored() { return _messages_ignored; }
  uint32_t _messages_ignored{};

  void bytes_ignored(uint64_t val) { _bytes_ignored = val; }
  uint64_t bytes_ignored() const { return _bytes_ignored; }
  uint64_t& bytes_ignored() { return _bytes_ignored; }
  uint64_t _bytes_ignored{};

  void input_processing_time(const  ::RtpsRelay::Duration_t& val) { _input_processing_time = val; }
  void input_processing_time( ::RtpsRelay::Duration_t&& val) { _input_processing_time = std::move(val); }
  const  ::RtpsRelay::Duration_t& input_processing_time() const { return _input_processing_time; }
   ::RtpsRelay::Duration_t& input_processing_time() { return _input_processing_time; }
   ::RtpsRelay::Duration_t _input_processing_time;

  void messages_out(uint32_t val) { _messages_out = val; }
  uint32_t messages_out() const { return _messages_out; }
  uint32_t& messages_out() { return _messages_out; }
  uint32_t _messages_out{};

  void bytes_out(uint64_t val) { _bytes_out = val; }
  uint64_t bytes_out() const { return _bytes_out; }
  uint64_t& bytes_out() { return _bytes_out; }
  uint64_t _bytes_out{};

  void messages_dropped(uint32_t val) { _messages_dropped = val; }
  uint32_t messages_dropped() const { return _messages_dropped; }
  uint32_t& messages_dropped() { return _messages_dropped; }
  uint32_t _messages_dropped{};

  void bytes_dropped(uint64_t val) { _bytes_dropped = val; }
  uint64_t bytes_dropped() const { return _bytes_dropped; }
  uint64_t& bytes_dropped() { return _bytes_dropped; }
  uint64_t _bytes_dropped{};

  void output_processing_time(const  ::RtpsRelay::Duration_t& val) { _output_processing_time = val; }
  void output_processing_time( ::RtpsRelay::Duration_t&& val) { _output_processing_time = std::move(val); }
  const  ::RtpsRelay::Duration_t& output_processing_time() const { return _output_processing_time; }
   ::RtpsRelay::Duration_t& output_processing_time() { return _output_processing_time; }
   ::RtpsRelay::Duration_t _output_processing_time;

  ProtocolStatistics() = default;
  ProtocolStatistics(uint32_t messages_in,
    uint64_t bytes_in,
    uint32_t messages_ignored,
    uint64_t bytes_ignored,
    const  ::RtpsRelay::Duration_t& input_processing_time,
    uint32_t messages_out,
    uint64_t bytes_out,
    uint32_t messages_dropped,
    uint64_t bytes_dropped,
    const  ::RtpsRelay::Duration_t& output_processing_time);

};

OpenDDS_RtpsRelayLib_Export void swap(ProtocolStatistics& lhs, ProtocolStatistics& rhs);

}

/* End STRUCT: ProtocolStatistics */


/* Begin CONST: PARTICIPANT_STATISTICS_TOPIC_NAME */

namespace RtpsRelay {
const std::string PARTICIPANT_STATISTICS_TOPIC_NAME = "Participant Statistics";
}

/* End CONST: PARTICIPANT_STATISTICS_TOPIC_NAME */


/* Begin STRUCT: ParticipantStatistics */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export ParticipantStatistics
{
public:

  void guid(const  ::RtpsRelay::GUID_t& val) { _guid = val; }
  void guid( ::RtpsRelay::GUID_t&& val) { _guid = std::move(val); }
  const  ::RtpsRelay::GUID_t& guid() const { return _guid; }
   ::RtpsRelay::GUID_t& guid() { return _guid; }
   ::RtpsRelay::GUID_t _guid;

  void name(const std::string& val) { _name = val; }
  void name(std::string&& val) { _name = std::move(val); }
  const std::string& name() const { return _name; }
  std::string& name() { return _name; }
  std::string _name;

  void session_time(const  ::RtpsRelay::Duration_t& val) { _session_time = val; }
  void session_time( ::RtpsRelay::Duration_t&& val) { _session_time = std::move(val); }
  const  ::RtpsRelay::Duration_t& session_time() const { return _session_time; }
   ::RtpsRelay::Duration_t& session_time() { return _session_time; }
   ::RtpsRelay::Duration_t _session_time;

  void rtps(const  ::RtpsRelay::ProtocolStatistics& val) { _rtps = val; }
  void rtps( ::RtpsRelay::ProtocolStatistics&& val) { _rtps = std::move(val); }
  const  ::RtpsRelay::ProtocolStatistics& rtps() const { return _rtps; }
   ::RtpsRelay::ProtocolStatistics& rtps() { return _rtps; }
   ::RtpsRelay::ProtocolStatistics _rtps;

  void stun(const  ::RtpsRelay::ProtocolStatistics& val) { _stun = val; }
  void stun( ::RtpsRelay::ProtocolStatistics&& val) { _stun = std::move(val); }
  const  ::RtpsRelay::ProtocolStatistics& stun() const { return _stun; }
   ::RtpsRelay::ProtocolStatistics& stun() { return _stun; }
   ::RtpsRelay::ProtocolStatistics _stun;

  ParticipantStatistics() = default;
  ParticipantStatistics(const  ::RtpsRelay::GUID_t& guid,
    const std::string& name,
    const  ::RtpsRelay::Duration_t& session_time,
    const  ::RtpsRelay::ProtocolStatistics& rtps,
    const  ::RtpsRelay::ProtocolStatistics& stun);

};

OpenDDS_RtpsRelayLib_Export void swap(ParticipantStatistics& lhs, ParticipantStatistics& rhs);

}

/* End STRUCT: ParticipantStatistics */


/* Begin CONST: HANDLER_STATISTICS_TOPIC_NAME */

namespace RtpsRelay {
const std::string HANDLER_STATISTICS_TOPIC_NAME = "Handler Statistics";
}

/* End CONST: HANDLER_STATISTICS_TOPIC_NAME */


/* Begin STRUCT: HandlerStatistics */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export HandlerStatistics
{
public:

  void relay_id(const std::string& val) { _relay_id = val; }
  void relay_id(std::string&& val) { _relay_id = std::move(val); }
  const std::string& relay_id() const { return _relay_id; }
  std::string& relay_id() { return _relay_id; }
  std::string _relay_id;

  void name(const std::string& val) { _name = val; }
  void name(std::string&& val) { _name = std::move(val); }
  const std::string& name() const { return _name; }
  std::string& name() { return _name; }
  std::string _name;

  void interval(const  ::RtpsRelay::Duration_t& val) { _interval = val; }
  void interval( ::RtpsRelay::Duration_t&& val) { _interval = std::move(val); }
  const  ::RtpsRelay::Duration_t& interval() const { return _interval; }
   ::RtpsRelay::Duration_t& interval() { return _interval; }
   ::RtpsRelay::Duration_t _interval;

  void rtps(const  ::RtpsRelay::ProtocolStatistics& val) { _rtps = val; }
  void rtps( ::RtpsRelay::ProtocolStatistics&& val) { _rtps = std::move(val); }
  const  ::RtpsRelay::ProtocolStatistics& rtps() const { return _rtps; }
   ::RtpsRelay::ProtocolStatistics& rtps() { return _rtps; }
   ::RtpsRelay::ProtocolStatistics _rtps;

  void stun(const  ::RtpsRelay::ProtocolStatistics& val) { _stun = val; }
  void stun( ::RtpsRelay::ProtocolStatistics&& val) { _stun = std::move(val); }
  const  ::RtpsRelay::ProtocolStatistics& stun() const { return _stun; }
   ::RtpsRelay::ProtocolStatistics& stun() { return _stun; }
   ::RtpsRelay::ProtocolStatistics _stun;

  void max_gain(uint32_t val) { _max_gain = val; }
  uint32_t max_gain() const { return _max_gain; }
  uint32_t& max_gain() { return _max_gain; }
  uint32_t _max_gain{};

  void error_count(uint32_t val) { _error_count = val; }
  uint32_t error_count() const { return _error_count; }
  uint32_t& error_count() { return _error_count; }
  uint32_t _error_count{};

  void max_queue_size(uint32_t val) { _max_queue_size = val; }
  uint32_t max_queue_size() const { return _max_queue_size; }
  uint32_t& max_queue_size() { return _max_queue_size; }
  uint32_t _max_queue_size{};

  void max_queue_latency(const  ::RtpsRelay::Duration_t& val) { _max_queue_latency = val; }
  void max_queue_latency( ::RtpsRelay::Duration_t&& val) { _max_queue_latency = std::move(val); }
  const  ::RtpsRelay::Duration_t& max_queue_latency() const { return _max_queue_latency; }
   ::RtpsRelay::Duration_t& max_queue_latency() { return _max_queue_latency; }
   ::RtpsRelay::Duration_t _max_queue_latency;

  HandlerStatistics() = default;
  HandlerStatistics(const std::string& relay_id,
    const std::string& name,
    const  ::RtpsRelay::Duration_t& interval,
    const  ::RtpsRelay::ProtocolStatistics& rtps,
    const  ::RtpsRelay::ProtocolStatistics& stun,
    uint32_t max_gain,
    uint32_t error_count,
    uint32_t max_queue_size,
    const  ::RtpsRelay::Duration_t& max_queue_latency);

};

OpenDDS_RtpsRelayLib_Export void swap(HandlerStatistics& lhs, HandlerStatistics& rhs);

}

/* End STRUCT: HandlerStatistics */


/* Begin CONST: RELAY_STATISTICS_TOPIC_NAME */

namespace RtpsRelay {
const std::string RELAY_STATISTICS_TOPIC_NAME = "Relay Statistics";
}

/* End CONST: RELAY_STATISTICS_TOPIC_NAME */


/* Begin STRUCT: RelayStatistics */

namespace RtpsRelay {

class OpenDDS_RtpsRelayLib_Export RelayStatistics
{
public:

  void relay_id(const std::string& val) { _relay_id = val; }
  void relay_id(std::string&& val) { _relay_id = std::move(val); }
  const std::string& relay_id() const { return _relay_id; }
  std::string& relay_id() { return _relay_id; }
  std::string _relay_id;

  void interval(const  ::RtpsRelay::Duration_t& val) { _interval = val; }
  void interval( ::RtpsRelay::Duration_t&& val) { _interval = std::move(val); }
  const  ::RtpsRelay::Duration_t& interval() const { return _interval; }
   ::RtpsRelay::Duration_t& interval() { return _interval; }
   ::RtpsRelay::Duration_t _interval;

  void rtps(const  ::RtpsRelay::ProtocolStatistics& val) { _rtps = val; }
  void rtps( ::RtpsRelay::ProtocolStatistics&& val) { _rtps = std::move(val); }
  const  ::RtpsRelay::ProtocolStatistics& rtps() const { return _rtps; }
   ::RtpsRelay::ProtocolStatistics& rtps() { return _rtps; }
   ::RtpsRelay::ProtocolStatistics _rtps;

  void stun(const  ::RtpsRelay::ProtocolStatistics& val) { _stun = val; }
  void stun( ::RtpsRelay::ProtocolStatistics&& val) { _stun = std::move(val); }
  const  ::RtpsRelay::ProtocolStatistics& stun() const { return _stun; }
   ::RtpsRelay::ProtocolStatistics& stun() { return _stun; }
   ::RtpsRelay::ProtocolStatistics _stun;

  void max_gain(uint32_t val) { _max_gain = val; }
  uint32_t max_gain() const { return _max_gain; }
  uint32_t& max_gain() { return _max_gain; }
  uint32_t _max_gain{};

  void error_count(uint32_t val) { _error_count = val; }
  uint32_t error_count() const { return _error_count; }
  uint32_t& error_count() { return _error_count; }
  uint32_t _error_count{};

  void local_active_participants(uint32_t val) { _local_active_participants = val; }
  uint32_t local_active_participants() const { return _local_active_participants; }
  uint32_t& local_active_participants() { return _local_active_participants; }
  uint32_t _local_active_participants{};

  void new_address_count(uint32_t val) { _new_address_count = val; }
  uint32_t new_address_count() const { return _new_address_count; }
  uint32_t& new_address_count() { return _new_address_count; }
  uint32_t _new_address_count{};

  void expired_address_count(uint32_t val) { _expired_address_count = val; }
  uint32_t expired_address_count() const { return _expired_address_count; }
  uint32_t& expired_address_count() { return _expired_address_count; }
  uint32_t _expired_address_count{};

  void max_queue_size(uint32_t val) { _max_queue_size = val; }
  uint32_t max_queue_size() const { return _max_queue_size; }
  uint32_t& max_queue_size() { return _max_queue_size; }
  uint32_t _max_queue_size{};

  void max_queue_latency(const  ::RtpsRelay::Duration_t& val) { _max_queue_latency = val; }
  void max_queue_latency( ::RtpsRelay::Duration_t&& val) { _max_queue_latency = std::move(val); }
  const  ::RtpsRelay::Duration_t& max_queue_latency() const { return _max_queue_latency; }
   ::RtpsRelay::Duration_t& max_queue_latency() { return _max_queue_latency; }
   ::RtpsRelay::Duration_t _max_queue_latency;

  void local_participants(uint32_t val) { _local_participants = val; }
  uint32_t local_participants() const { return _local_participants; }
  uint32_t& local_participants() { return _local_participants; }
  uint32_t _local_participants{};

  void local_writers(uint32_t val) { _local_writers = val; }
  uint32_t local_writers() const { return _local_writers; }
  uint32_t& local_writers() { return _local_writers; }
  uint32_t _local_writers{};

  void local_readers(uint32_t val) { _local_readers = val; }
  uint32_t local_readers() const { return _local_readers; }
  uint32_t& local_readers() { return _local_readers; }
  uint32_t _local_readers{};

  void relay_partitions_pub_count(uint32_t val) { _relay_partitions_pub_count = val; }
  uint32_t relay_partitions_pub_count() const { return _relay_partitions_pub_count; }
  uint32_t& relay_partitions_pub_count() { return _relay_partitions_pub_count; }
  uint32_t _relay_partitions_pub_count{};

  void relay_address_pub_count(uint32_t val) { _relay_address_pub_count = val; }
  uint32_t relay_address_pub_count() const { return _relay_address_pub_count; }
  uint32_t& relay_address_pub_count() { return _relay_address_pub_count; }
  uint32_t _relay_address_pub_count{};

  void spdp_replay_pub_count(uint32_t val) { _spdp_replay_pub_count = val; }
  uint32_t spdp_replay_pub_count() const { return _spdp_replay_pub_count; }
  uint32_t& spdp_replay_pub_count() { return _spdp_replay_pub_count; }
  uint32_t _spdp_replay_pub_count{};

  void admission_deferral_count(uint32_t val) { _admission_deferral_count = val; }
  uint32_t admission_deferral_count() const { return _admission_deferral_count; }
  uint32_t& admission_deferral_count() { return _admission_deferral_count; }
  uint32_t _admission_deferral_count{};

  RelayStatistics() = default;
  RelayStatistics(const std::string& relay_id,
    const  ::RtpsRelay::Duration_t& interval,
    const  ::RtpsRelay::ProtocolStatistics& rtps,
    const  ::RtpsRelay::ProtocolStatistics& stun,
    uint32_t max_gain,
    uint32_t error_count,
    uint32_t local_active_participants,
    uint32_t new_address_count,
    uint32_t expired_address_count,
    uint32_t max_queue_size,
    const  ::RtpsRelay::Duration_t& max_queue_latency,
    uint32_t local_participants,
    uint32_t local_writers,
    uint32_t local_readers,
    uint32_t relay_partitions_pub_count,
    uint32_t relay_address_pub_count,
    uint32_t spdp_replay_pub_count,
    uint32_t admission_deferral_count);

};

OpenDDS_RtpsRelayLib_Export void swap(RelayStatistics& lhs, RelayStatistics& rhs);

}

/* End STRUCT: RelayStatistics */

/* End MODULE: RtpsRelay */
#endif /* OPENDDS_IDL_GENERATED_RELAYC_H_F2QIEV */
