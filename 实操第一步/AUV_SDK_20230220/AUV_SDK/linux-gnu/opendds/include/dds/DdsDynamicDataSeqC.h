// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p25
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:151

#ifndef _TAO_IDL_DDSDYNAMICDATASEQC_EZ4D7C_H_
#define _TAO_IDL_DDSDYNAMICDATASEQC_EZ4D7C_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "dds/DCPS/dcps_export.h"
#include "tao/ORB.h"
#include "tao/Basic_Types_IDLv4.h"
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  using namespace IDLv4;
}

TAO_END_VERSIONED_NAMESPACE_DECL

#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"
#include /**/ "dds/Versioned_Namespace.h"

#include "tao/LongSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/Int8SeqC.h"
#include "tao/UInt8SeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/UShortSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/OctetSeqC.h"
#include "tao/BooleanSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/WStringSeqC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO OpenDDS_Dcps_Export

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



OPENDDS_END_VERSIONED_NAMESPACE_DECL



OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:37

namespace DDS
{

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_INT32SEQ_CH_)
#define _DDS_INT32SEQ_CH_

  class Int32Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        Int32Seq
      >
    Int32Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        Int32Seq
      >
    Int32Seq_out;

  class OpenDDS_Dcps_Export Int32Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Long>
  {
  public:
    Int32Seq (void);
    Int32Seq ( ::CORBA::ULong max);
    Int32Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Long* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    Int32Seq (const Int32Seq &) = default;
    Int32Seq (Int32Seq &&) = default;
    Int32Seq& operator= (const Int32Seq &) = default;
    Int32Seq& operator= (Int32Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~Int32Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Int32Seq_var _var_type;
    typedef Int32Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_UINT32SEQ_CH_)
#define _DDS_UINT32SEQ_CH_

  class UInt32Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        UInt32Seq
      >
    UInt32Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        UInt32Seq
      >
    UInt32Seq_out;

  class OpenDDS_Dcps_Export UInt32Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::ULong>
  {
  public:
    UInt32Seq (void);
    UInt32Seq ( ::CORBA::ULong max);
    UInt32Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULong* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    UInt32Seq (const UInt32Seq &) = default;
    UInt32Seq (UInt32Seq &&) = default;
    UInt32Seq& operator= (const UInt32Seq &) = default;
    UInt32Seq& operator= (UInt32Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~UInt32Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef UInt32Seq_var _var_type;
    typedef UInt32Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_INT8SEQ_CH_)
#define _DDS_INT8SEQ_CH_

  class Int8Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        Int8Seq
      >
    Int8Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        Int8Seq
      >
    Int8Seq_out;

  class OpenDDS_Dcps_Export Int8Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Int8, CORBA::IDLv4::Int8_tag>
  {
  public:
    Int8Seq (void);
    Int8Seq ( ::CORBA::ULong max);
    Int8Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Int8* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    Int8Seq (const Int8Seq &) = default;
    Int8Seq (Int8Seq &&) = default;
    Int8Seq& operator= (const Int8Seq &) = default;
    Int8Seq& operator= (Int8Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~Int8Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Int8Seq_var _var_type;
    typedef Int8Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_UINT8SEQ_CH_)
#define _DDS_UINT8SEQ_CH_

  class UInt8Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        UInt8Seq
      >
    UInt8Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        UInt8Seq
      >
    UInt8Seq_out;

  class OpenDDS_Dcps_Export UInt8Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::UInt8, CORBA::IDLv4::UInt8_tag>
  {
  public:
    UInt8Seq (void);
    UInt8Seq ( ::CORBA::ULong max);
    UInt8Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::UInt8* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    UInt8Seq (const UInt8Seq &) = default;
    UInt8Seq (UInt8Seq &&) = default;
    UInt8Seq& operator= (const UInt8Seq &) = default;
    UInt8Seq& operator= (UInt8Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~UInt8Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef UInt8Seq_var _var_type;
    typedef UInt8Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_INT16SEQ_CH_)
#define _DDS_INT16SEQ_CH_

  class Int16Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        Int16Seq
      >
    Int16Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        Int16Seq
      >
    Int16Seq_out;

  class OpenDDS_Dcps_Export Int16Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Short>
  {
  public:
    Int16Seq (void);
    Int16Seq ( ::CORBA::ULong max);
    Int16Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    Int16Seq (const Int16Seq &) = default;
    Int16Seq (Int16Seq &&) = default;
    Int16Seq& operator= (const Int16Seq &) = default;
    Int16Seq& operator= (Int16Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~Int16Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Int16Seq_var _var_type;
    typedef Int16Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_UINT16SEQ_CH_)
#define _DDS_UINT16SEQ_CH_

  class UInt16Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        UInt16Seq
      >
    UInt16Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        UInt16Seq
      >
    UInt16Seq_out;

  class OpenDDS_Dcps_Export UInt16Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::UShort>
  {
  public:
    UInt16Seq (void);
    UInt16Seq ( ::CORBA::ULong max);
    UInt16Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::UShort* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    UInt16Seq (const UInt16Seq &) = default;
    UInt16Seq (UInt16Seq &&) = default;
    UInt16Seq& operator= (const UInt16Seq &) = default;
    UInt16Seq& operator= (UInt16Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~UInt16Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef UInt16Seq_var _var_type;
    typedef UInt16Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_INT64SEQ_CH_)
#define _DDS_INT64SEQ_CH_

  class Int64Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        Int64Seq
      >
    Int64Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        Int64Seq
      >
    Int64Seq_out;

  class OpenDDS_Dcps_Export Int64Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::LongLong>
  {
  public:
    Int64Seq (void);
    Int64Seq ( ::CORBA::ULong max);
    Int64Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::LongLong* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    Int64Seq (const Int64Seq &) = default;
    Int64Seq (Int64Seq &&) = default;
    Int64Seq& operator= (const Int64Seq &) = default;
    Int64Seq& operator= (Int64Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~Int64Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Int64Seq_var _var_type;
    typedef Int64Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_UINT64SEQ_CH_)
#define _DDS_UINT64SEQ_CH_

  class UInt64Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        UInt64Seq
      >
    UInt64Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        UInt64Seq
      >
    UInt64Seq_out;

  class OpenDDS_Dcps_Export UInt64Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::ULongLong>
  {
  public:
    UInt64Seq (void);
    UInt64Seq ( ::CORBA::ULong max);
    UInt64Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULongLong* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    UInt64Seq (const UInt64Seq &) = default;
    UInt64Seq (UInt64Seq &&) = default;
    UInt64Seq& operator= (const UInt64Seq &) = default;
    UInt64Seq& operator= (UInt64Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~UInt64Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef UInt64Seq_var _var_type;
    typedef UInt64Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_FLOAT32SEQ_CH_)
#define _DDS_FLOAT32SEQ_CH_

  class Float32Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        Float32Seq
      >
    Float32Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        Float32Seq
      >
    Float32Seq_out;

  class OpenDDS_Dcps_Export Float32Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Float>
  {
  public:
    Float32Seq (void);
    Float32Seq ( ::CORBA::ULong max);
    Float32Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Float* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    Float32Seq (const Float32Seq &) = default;
    Float32Seq (Float32Seq &&) = default;
    Float32Seq& operator= (const Float32Seq &) = default;
    Float32Seq& operator= (Float32Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~Float32Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Float32Seq_var _var_type;
    typedef Float32Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_FLOAT64SEQ_CH_)
#define _DDS_FLOAT64SEQ_CH_

  class Float64Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        Float64Seq
      >
    Float64Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        Float64Seq
      >
    Float64Seq_out;

  class OpenDDS_Dcps_Export Float64Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Double>
  {
  public:
    Float64Seq (void);
    Float64Seq ( ::CORBA::ULong max);
    Float64Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    Float64Seq (const Float64Seq &) = default;
    Float64Seq (Float64Seq &&) = default;
    Float64Seq& operator= (const Float64Seq &) = default;
    Float64Seq& operator= (Float64Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~Float64Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Float64Seq_var _var_type;
    typedef Float64Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_FLOAT128SEQ_CH_)
#define _DDS_FLOAT128SEQ_CH_

  class Float128Seq;

  typedef
    ::TAO_FixedSeq_Var_T<
        Float128Seq
      >
    Float128Seq_var;

  typedef
    ::TAO_Seq_Out_T<
        Float128Seq
      >
    Float128Seq_out;

  class OpenDDS_Dcps_Export Float128Seq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::LongDouble>
  {
  public:
    Float128Seq (void);
    Float128Seq ( ::CORBA::ULong max);
    Float128Seq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::LongDouble* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    Float128Seq (const Float128Seq &) = default;
    Float128Seq (Float128Seq &&) = default;
    Float128Seq& operator= (const Float128Seq &) = default;
    Float128Seq& operator= (Float128Seq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~Float128Seq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef Float128Seq_var _var_type;
    typedef Float128Seq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_CHARSEQ_CH_)
#define _DDS_CHARSEQ_CH_

  class CharSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        CharSeq
      >
    CharSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        CharSeq
      >
    CharSeq_out;

  class OpenDDS_Dcps_Export CharSeq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Char>
  {
  public:
    CharSeq (void);
    CharSeq ( ::CORBA::ULong max);
    CharSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    CharSeq (const CharSeq &) = default;
    CharSeq (CharSeq &&) = default;
    CharSeq& operator= (const CharSeq &) = default;
    CharSeq& operator= (CharSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~CharSeq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef CharSeq_var _var_type;
    typedef CharSeq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_WCHARSEQ_CH_)
#define _DDS_WCHARSEQ_CH_

  class WcharSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        WcharSeq
      >
    WcharSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        WcharSeq
      >
    WcharSeq_out;

  class OpenDDS_Dcps_Export WcharSeq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::WChar>
  {
  public:
    WcharSeq (void);
    WcharSeq ( ::CORBA::ULong max);
    WcharSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::WChar* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    WcharSeq (const WcharSeq &) = default;
    WcharSeq (WcharSeq &&) = default;
    WcharSeq& operator= (const WcharSeq &) = default;
    WcharSeq& operator= (WcharSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~WcharSeq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef WcharSeq_var _var_type;
    typedef WcharSeq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_BOOLEANSEQ_CH_)
#define _DDS_BOOLEANSEQ_CH_

  class BooleanSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        BooleanSeq
      >
    BooleanSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        BooleanSeq
      >
    BooleanSeq_out;

  class OpenDDS_Dcps_Export BooleanSeq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Boolean>
  {
  public:
    BooleanSeq (void);
    BooleanSeq ( ::CORBA::ULong max);
    BooleanSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Boolean* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    BooleanSeq (const BooleanSeq &) = default;
    BooleanSeq (BooleanSeq &&) = default;
    BooleanSeq& operator= (const BooleanSeq &) = default;
    BooleanSeq& operator= (BooleanSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~BooleanSeq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef BooleanSeq_var _var_type;
    typedef BooleanSeq_out _out_type;
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_BYTESEQ_CH_)
#define _DDS_BYTESEQ_CH_

  class ByteSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        ByteSeq
      >
    ByteSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        ByteSeq
      >
    ByteSeq_out;

  class OpenDDS_Dcps_Export ByteSeq
    : public
        ::TAO::unbounded_value_sequence< ::CORBA::Octet>
  {
  public:
    ByteSeq (void);
    ByteSeq ( ::CORBA::ULong max);
    ByteSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Octet* buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    ByteSeq (const ByteSeq &) = default;
    ByteSeq (ByteSeq &&) = default;
    ByteSeq& operator= (const ByteSeq &) = default;
    ByteSeq& operator= (ByteSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~ByteSeq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef ByteSeq_var _var_type;
    typedef ByteSeq_out _out_type;

    

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    ByteSeq (
        ::CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */

  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:101

  

#if !defined (_DDS_WSTRINGSEQ_CH_)
#define _DDS_WSTRINGSEQ_CH_

  class WstringSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        WstringSeq
      >
    WstringSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        WstringSeq
      >
    WstringSeq_out;

  class OpenDDS_Dcps_Export WstringSeq
    : public
        ::TAO::unbounded_basic_string_sequence<CORBA::WChar>
  {
  public:
    WstringSeq (void);
    WstringSeq ( ::CORBA::ULong max);
    WstringSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::WChar ** buffer,
      ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
    WstringSeq (const WstringSeq &) = default;
    WstringSeq (WstringSeq &&) = default;
    WstringSeq& operator= (const WstringSeq &) = default;
    WstringSeq& operator= (WstringSeq &&) = default;
#endif /* ACE_HAS_CPP11 */
    virtual ~WstringSeq (void);
    
    // TAO_IDL - Generated from
    // be/be_type.cpp:304

    
    typedef WstringSeq_var _var_type;
    typedef WstringSeq_out _out_type;
  };

#endif /* end #if !defined */


// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:65


} // module DDS
// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:66




OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::Int32Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::Int32Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::UInt32Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::UInt32Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::Int8Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::Int8Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::UInt8Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::UInt8Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::Int16Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::Int16Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::UInt16Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::UInt16Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::Int64Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::Int64Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::UInt64Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::UInt64Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::Float32Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::Float32Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::Float64Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::Float64Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::Float128Seq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::Float128Seq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::CharSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::CharSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::WcharSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::WcharSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::BooleanSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::BooleanSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::ByteSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::ByteSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:674

  

  template<>
  class Arg_Traits< ::DDS::WstringSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::DDS::WstringSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:60




OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_Int32Seq_H_
#define _TAO_CDR_OP_DDS_Int32Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::Int32Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::Int32Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_Int32Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_UInt32Seq_H_
#define _TAO_CDR_OP_DDS_UInt32Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::UInt32Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::UInt32Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_UInt32Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_Int8Seq_H_
#define _TAO_CDR_OP_DDS_Int8Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::Int8Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::Int8Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_Int8Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_UInt8Seq_H_
#define _TAO_CDR_OP_DDS_UInt8Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::UInt8Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::UInt8Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_UInt8Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_Int16Seq_H_
#define _TAO_CDR_OP_DDS_Int16Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::Int16Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::Int16Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_Int16Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_UInt16Seq_H_
#define _TAO_CDR_OP_DDS_UInt16Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::UInt16Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::UInt16Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_UInt16Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_Int64Seq_H_
#define _TAO_CDR_OP_DDS_Int64Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::Int64Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::Int64Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_Int64Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_UInt64Seq_H_
#define _TAO_CDR_OP_DDS_UInt64Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::UInt64Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::UInt64Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_UInt64Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_Float32Seq_H_
#define _TAO_CDR_OP_DDS_Float32Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::Float32Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::Float32Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_Float32Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_Float64Seq_H_
#define _TAO_CDR_OP_DDS_Float64Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::Float64Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::Float64Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_Float64Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_Float128Seq_H_
#define _TAO_CDR_OP_DDS_Float128Seq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::Float128Seq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::Float128Seq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_Float128Seq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_CharSeq_H_
#define _TAO_CDR_OP_DDS_CharSeq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::CharSeq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::CharSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_CharSeq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_WcharSeq_H_
#define _TAO_CDR_OP_DDS_WcharSeq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::WcharSeq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::WcharSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_WcharSeq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_BooleanSeq_H_
#define _TAO_CDR_OP_DDS_BooleanSeq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::BooleanSeq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::BooleanSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_BooleanSeq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_ByteSeq_H_
#define _TAO_CDR_OP_DDS_ByteSeq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::ByteSeq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::ByteSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_ByteSeq_H_ */
// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:67



#if !defined _TAO_CDR_OP_DDS_WstringSeq_H_
#define _TAO_CDR_OP_DDS_WstringSeq_H_

OPENDDS_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


OpenDDS_Dcps_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DDS::WstringSeq &_tao_sequence);
OpenDDS_Dcps_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DDS::WstringSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DDS_WstringSeq_H_ */
// TAO_IDL - Generated from
// be/be_codegen.cpp:1666



OPENDDS_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "DdsDynamicDataSeqC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

